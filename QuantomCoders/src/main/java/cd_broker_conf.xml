<?xml version="1.0" encoding="UTF-8"?>
<!-- The Tridion Content Broker configuration specifies all configuration values to enable data storage. -->
<Configuration Version="5.4">
	<!-- The Global section specifies configuration details that apply to all functionality. -->
	<Global>
		<!-- The Logging section specifies the behaviour and location of one or more loggers. -->
		<Logging>
			<!-- Defines the default logger. The Level attribute specifies the amount of information to log.
			Legal logging levels:
				info		Information messages.
				warning	    Potential error conditions.
				error		Errors that prevent the software from functioning correctly.
				fatal		Unrecoverable errors. -->
			<Logger Level="error">
				<!-- A FileLogger logs to a log file specified by the 'Location' attribute. -->
				<FileLogger Level="error" Location="/apps/ekibemobile/jboss-eap-5.1.0/jboss-eap-5.1/jboss-as/server/default/log/cd_broker.log" MaximumFileSize="5M" NumberOfFiles="5"/>
				<!-- Enable this Logger to print log messages to a console. -->
				<!-- <ConsoleLogger Level="error" Trace="on"/> -->
			</Logger>
		</Logging>
		<!--
		Specify RMI listening port
		-->
		<!--
		<RMIChannel ListenerPort="1050"/>
		-->
		<Storage>
			<!-- 
				Database elements configure settings that will be used to access a Tridion Content Delivery
				database.
				
				A database can be configured by specifying a JNDI name, in this case the Application Server needs
				to configure the proper connection and bind it to this JNDI name.
				
				All properties for the database connection may also be specified inline. This makes use of the
				JDBC DataSource, so for driver specific properties consult the documentation of the driver.
				For the most common databases and settings examples are given below:
			-->
			<!--			
				Configuration example for using a JDNI datasource. 

			-->
			<!--			
			<Database Type="sql" JNDIName="java:comp/env/jdbc/DATA_SOURCE_NAME"/>
			-->
			<!--
				For Database elements of type sql, you can specify the pooling that
				should be used with a Pool element. This pooling is independent of the selected database driver.
				
				This element has the following attributes:
					Type               The type should be either jdbc or tridion.
					Size               Maximum number of connections to open.
					MonitorInterval    Number of seconds between checks on the pool.
					IdleTimeout        Number of seconds a connection can be idle before it is closed.
					CheckoutTimeout    Number of seconds a connection can be checked out before it is returned to pool.
			-->
			<!--			
				Configuration example for Oracle 10 and Oracle 11. 

				The DataSource element specifies the class name of the DataSource to use and properties specific to the datasource.
				For the Oracle 10 driver the minimum set of properties to set are:			
					driverType: set to value "thin". Indicates the type of driver to use, by using "thin" no oracle client installation is required.
					networkProtocol: "tcp". Indicates TCP/IP will be used for connectivity.
					serverName: name of the server that hosts the database
					portNumber: configuration of the port used for TCP/IP connections to the database. 1521 is the default port.
					databaseName: name of the database to access
					userName: username used to access the database
					password: password used to access the database
				
			-->
			<!--
			<Database Type="sql">
				<Pool Type="jdbc" Size="5" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120" />
				<DataSource Class="oracle.jdbc.pool.OracleDataSource">
					<Property Name="driverType" Value="thin"/>
					<Property Name="networkProtocol" Value="tcp"/>
					<Property Name="serverName" Value="SERVER_NAME"/>
					<Property Name="portNumber" Value="1521"/>
					<Property Name="databaseName" Value="DATABASE_NAME"/>
					<Property Name="user" Value="USER_NAME"/>
					<Property Name="password" Value="PASSWORD"/>
				</DataSource>
			</Database>			
			-->
			<!--			
				Configuration example for MS SQL Server 2005 & 2008, using the MSSQL 2005 JDBC driver. 

				The DataSource element specifies the class name of the DataSource to use and properties specific to the datasource.
				For the MSSQL JDBC 2005 driver the minimum set of properties to set are:			
					serverName: name of the server that hosts the database
					portNumber: configuration of the port used for TCP/IP connections to the database. 1433 is the default port.
					databaseName: name of the database to access
					userName: username used to access the database
					password: password used to access the database
				
			-->
			<!--			
			<Database Type="sql">
				<Pool Type="jdbc" Size="5" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120" />
				<DataSource Class="com.microsoft.sqlserver.jdbc.SQLServerDataSource">
					<Property Name="serverName" Value="SERVER_NAME"/>
					<Property Name="portNumber" Value="1433"/>
					<Property Name="databaseName" Value="DATABASE_NAME"/>
					<Property Name="user" Value="USER_NAME"/>
					<Property Name="password" Value="PASSWORD"/>
				</DataSource>
			</Database>			
			-->
			<!--			
				Configuration example for DB2 Version 9.5

				The DataSource element specifies the class name of the DataSource to use and properties specific to the datasource.
				For the DB2 Version 9.5 driver the minimum set of properties to set are:			
					serverName: name of the server that hosts the database
					portNumber: configuration of the port used for TCP/IP connections to the database. 50000 is the default port.
					databaseName: name of the database to access
					userName: username used to access the database
					password: password used to access the database
					driverType: set to "4" to indicate a pure java driver so no client installations of the driver are required.
				
			-->
			<!--			
			<Database Type="sql">
				<Pool Type="jdbc" Size="5" MonitorInterval="60" IdleTimeout="120" CheckoutTimeout="120" />
				<DataSource Class="com.ibm.db2.jcc.DB2SimpleDataSource">
					<Property Name="serverName" Value="SERVER_NAME"/>
					<Property Name="portNumber" Value="50000"/>
					<Property Name="databaseName" Value="DATABASE_NAME"/>
					<Property Name="user" Value="USER_NAME"/>
					<Property Name="password" Value="PASSWORD"/>
					<Property Name="driverType" Value="4"/>
				</DataSource>
			</Database>
			-->
			<!--
			The QueryGenerator element configures  a query generator used as a Broker Query mechanism
			-->
			<!--
			Configuration Example for generic SQL which can be used for MSSQL databases or extended for other database types
			
			<QueryGenerator Name="SQLQueryGenerator" Class="com.tridion.broker.querying.generators.SQLQueryGenerator"/>
			-->
			<!--
			Configuration Example for Oracle Query generator
			
			<QueryGenerator Name="SQLQueryGenerator" Class="com.tridion.broker.querying.generators.OracleQueryGenerator"/>
			-->
			<!--
			Configuration Example for DB2 generator
			
			<QueryGenerator Name="SQLQueryGenerator" Class="com.tridion.broker.querying.generators.DB2QueryGenerator"/>
			-->
		</Storage>
		<!-- The Bindings element contains mappings from symbolic names to classes in the form of Binding elements.
		     A Binding element has two attributes:
				 Name  The symbolic name for an item that needs to be stored.
				 Class The class implementing the interface that is expected for a certain symbolic name.
		     By default, the following bindings are loaded: (Note that some features like Taxonomies are not available for filesystem bindings)-->
		<!--
			 <Binding Name="LinkInfo" Class="com.tridion.broker.linking.FSCSVLinkInfoHome"/>
			 <Binding Name="ComponentMeta" Class="com.tridion.broker.components.meta.XMLFileComponentMetaHome"/>
			 <Binding Name="PageMeta" Class="com.tridion.broker.pages.meta.XMLFilePageMetaHome"/>
			 <Binding Name="BinaryMeta" Class="com.tridion.broker.binaries.meta.XMLFileBinaryMetaHome"/>
			 <Binding Name="Schema" Class="com.tridion.broker.schemas.FSSchemaHome"/>
			 <Binding Name="Template" Class="com.tridion.broker.xslt.FSXSLTHome"/>
			 <Binding Name="XSLT" Class="com.tridion.broker.xslt.FSXSLTHome"/>
			 <Binding Name="ComponentPresentationMeta" Class="com.tridion.broker.componentpresentations.meta.XMLFileComponentPresentationMetaHome"/>
			 <Binding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.FSTextComponentPresentationHome"/>
			 <Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.FSASPComponentPresentationHome"/>
			 <Binding Name="JSPComponentPresentation" Class="com.tridion.broker.componentpresentations.FSJSPComponentPresentationHome"/>
			 <Binding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.FSXMLComponentPresentationHome"/>
			 <Binding Name="Reference" Class="com.tridion.broker.references.FileReferenceHome"/>
			-->
		<!-- The default bindings (which use the file system) can be overridden for
		     different storage types. Note that not for all bindings a storage
		     specific implementation class are delivered out of the box.
		     Below combinations of Bindings are given for the default supported.      -->
		<!-- MS SQL Server:
			<Binding Name="DynamicLinkInfo" Class="com.tridion.broker.linking.SQLDynamicLinkInfoHome"/>
			<Binding Name="LinkInfo" Class="com.tridion.broker.linking.SQLLinkInfoHome"/>
			<Binding Name="PageMeta" Class="com.tridion.broker.pages.meta.SQLPageMetaHome"/>
			<Binding Name="ComponentMeta" Class="com.tridion.broker.components.meta.MsSqlComponentMetaHome"/>
			<Binding Name="BinaryMeta" Class="com.tridion.broker.binaries.meta.SQLBinaryMetaHome"/>
			<Binding Name="Reference" Class="com.tridion.broker.references.SQLReferenceHome"/>
			<Binding Name="CustomMeta" Class="com.tridion.broker.meta.custom.SQLCustomMetaHome"/>
			<Binding Name="Category" Class="com.tridion.broker.meta.categorization.SQLCategoryHome"/>
			<Binding Name="Taxonomy" Class="com.tridion.broker.taxonomies.SQLTaxonomyHome"/>
		-->
		<!-- Complementing MS SQL Server bindings for all the rest of stored items.
			<Binding Name="Schema" Class="com.tridion.broker.schemas.SQLSchemaHome"/>
			<Binding Name="Template" Class="com.tridion.broker.xslt.SQLXSLTHome"/>
			<Binding Name="XSLT" Class="com.tridion.broker.xslt.SQLXSLTHome"/>
			<Binding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.MsSqlTextComponentPresentationHome"/>
			<Binding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.MsSqlXMLComponentPresentationHome"/>
			<Binding Name="ComponentPresentationMeta" Class="com.tridion.broker.componentpresentations.meta.SQLComponentPresentationMetaHome"/>
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.MsSqlASPComponentPresentationHome"/>
			
			Replace the above ASPComponentPresentation with this binding if your Dynamic Component Presentations have ASCX output:
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.MsSqlASCXComponentPresentationHome"/>

			The following bindings can only be used in combination with Content Web Application layer:
			<Binding Name="JSPComponentPresentation" Class="com.tridion.broker.componentpresentations.MsSqlJSPComponentPresentationHome"/>
			<Binding Name="Page" Class="com.tridion.broker.pages.SQLPageHome"/>
			<Binding Name="Binary" Class="com.tridion.broker.binaries.SQLBinaryHome"/>
		-->
		<!-- DB2:
			<Binding Name="LinkInfo" Class="com.tridion.broker.linking.SQLLinkInfoHome"/>
			<Binding Name="DynamicLinkInfo" Class="com.tridion.broker.linking.SQLDynamicLinkInfoHome"/>
			<Binding Name="PageMeta" Class="com.tridion.broker.pages.meta.SQLPageMetaHome"/>
			<Binding Name="ComponentMeta" Class="com.tridion.broker.components.meta.DB2ComponentMetaHome"/>
			<Binding Name="BinaryMeta" Class="com.tridion.broker.binaries.meta.SQLBinaryMetaHome"/>
			<Binding Name="Reference" Class="com.tridion.broker.references.SQLReferenceHome"/>
			<Binding Name="ComponentPresentationMeta" Class="com.tridion.broker.componentpresentations.meta.SQLComponentPresentationMetaHome"/>
			<Binding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2TextComponentPresentationHome"/>
			<Binding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2XMLComponentPresentationHome"/>
			<Binding Name="Category" Class="com.tridion.broker.meta.categorization.SQLCategoryHome"/>
			<Binding Name="CustomMeta" Class="com.tridion.broker.meta.custom.SQLCustomMetaHome"/>
			<Binding Name="Taxonomy" Class="com.tridion.broker.taxonomies.SQLTaxonomyHome"/>
		-->
		<!-- Complementing DB2 bindings for all the rest of stored items 
			<Binding Name="Schema" Class="com.tridion.broker.schemas.SQLSchemaHome"/>
			<Binding Name="Template" Class="com.tridion.broker.xslt.SQLXSLTHome"/>
			<Binding Name="XSLT" Class="com.tridion.broker.xslt.SQLXSLTHome"/>
			<Binding Name="CustomMeta" Class="com.tridion.broker.meta.custom.SQLCustomMetaHome"/>
			<Binding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2TextComponentPresentationHome"/>
			<Binding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2XMLComponentPresentationHome"/>
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2ASPComponentPresentationHome"/>
			
			Replace the above ASPComponentPresentation with this binding if your Dynamic Component Presentations have ASCX output:
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2ASCXComponentPresentationHome"/>
			
			The following bindings can only be used in combination with Content Web Application layer:
			<Binding Name="JSPComponentPresentation" Class="com.tridion.broker.componentpresentations.DB2JSPComponentPresentationHome"/>
			<Binding Name="Page" Class="com.tridion.broker.pages.SQLPageHome"/> 
			<Binding Name="Binary" Class="com.tridion.broker.binaries.SQLBinaryHome"/>
		-->
		<!-- Oracle:
			<Binding Name="LinkInfo" Class="com.tridion.broker.linking.SQLLinkInfoHome"/>
			<Binding Name="DynamicLinkInfo" Class="com.tridion.broker.linking.SQLDynamicLinkInfoHome"/>
			<Binding Name="PageMeta" Class="com.tridion.broker.pages.meta.SQLPageMetaHome"/>
			<Binding Name="ComponentMeta" Class="com.tridion.broker.components.meta.OracleComponentMetaHome"/>
			<Binding Name="BinaryMeta" Class="com.tridion.broker.binaries.meta.SQLBinaryMetaHome"/>
			<Binding Name="Reference" Class="com.tridion.broker.references.SQLReferenceHome"/>
			<Binding Name="ComponentPresentationMeta" Class="com.tridion.broker.componentpresentations.meta.SQLComponentPresentationMetaHome"/>
			<Binding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.OracleTextComponentPresentationHome"/>
			<Binding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.OracleXMLComponentPresentationHome"/>
			<Binding Name="Category" Class="com.tridion.broker.meta.categorization.SQLCategoryHome"/>
			<Binding Name="CustomMeta" Class="com.tridion.broker.meta.custom.SQLCustomMetaHome"/>
			<Binding Name="Taxonomy" Class="com.tridion.broker.taxonomies.SQLTaxonomyHome" />
		-->
		<!-- Complementing Oracle bindings for all the rest of stored items 
			<Binding Name="Schema" Class="com.tridion.broker.schemas.SQLSchemaHome"/>
			<Binding Name="Template" Class="com.tridion.broker.xslt.SQLXSLTHome"/>
			<Binding Name="XSLT" Class="com.tridion.broker.xslt.SQLXSLTHome"/>
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.OracleASPComponentPresentationHome"/>
			
			Replace the above ASPComponentPresentation with this binding if your Dynamic Component Presentations have ASCX output:
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.OracleASCXComponentPresentationHome" />
			
			The following bindings can only be used in combination with Content Web Application layer:
			<Binding Name="JSPComponentPresentation" Class="com.tridion.broker.componentpresentations.OracleJSPComponentPresentationHome"/>
			<Binding Name="Page" Class="com.tridion.broker.pages.SQLPageHome"/>
			<Binding Name="Binary" Class="com.tridion.broker.binaries.SQLBinaryHome"/>
			
		-->
		<!-- When the WAI is installed with Profiling and Tracking are enabled,
		     the following bindings should be added: -->
		<!-- MS SQL Server:
			<Binding Name="User" Class="com.tridion.user.MsSqlUserHome"/>
			<Binding Name="CustomerCharacteristic" Class="com.tridion.personalization.SQLCustomerCharacteristicHome"/>
			<Binding Name="TrackingKey" Class="com.tridion.personalization.SQLTrackingKeyHome"/>
			<Binding Name="Timeframe" Class="com.tridion.timeframes.MsSqlTimeframeHome"/>
			<Binding Name="TrackedPage" Class="com.tridion.tracking.pages.SQLTrackedPageHome"/>
			<Binding Name="TrackedComponent" Class="com.tridion.tracking.components.SQLTrackedComponentHome"/>
			<Binding Name="TrackedComponentLink" Class="com.tridion.tracking.componentlinks.SQLTrackedComponentLinkHome"/>
		-->
		<!-- DB2:
			<Binding Name="User" Class="com.tridion.user.DB2UserHome"/>
			<Binding Name="CustomerCharacteristic" Class="com.tridion.personalization.SQLCustomerCharacteristicHome"/>
			<Binding Name="TrackingKey" Class="com.tridion.personalization.SQLTrackingKeyHome"/>
			<Binding Name="Timeframe" Class="com.tridion.timeframes.DB2TimeframeHome"/>
			<Binding Name="TrackedPage" Class="com.tridion.tracking.pages.SQLTrackedPageHome"/>
			<Binding Name="TrackedComponent" Class="com.tridion.tracking.components.SQLTrackedComponentHome"/>
			<Binding Name="TrackedComponentLink" Class="com.tridion.tracking.componentlinks.SQLTrackedComponentLinkHome"/>
		-->
		<!-- Oracle:
			<Binding Name="User" Class="com.tridion.user.OracleUserHome"/>
			<Binding Name="CustomerCharacteristic" Class="com.tridion.personalization.SQLCustomerCharacteristicHome"/>
			<Binding Name="TrackingKey" Class="com.tridion.personalization.SQLTrackingKeyHome"/>
			<Binding Name="Timeframe" Class="com.tridion.timeframes.OracleTimeframeHome"/>
			<Binding Name="TrackedPage" Class="com.tridion.tracking.pages.SQLTrackedPageHome"/>
			<Binding Name="TrackedComponent" Class="com.tridion.tracking.components.SQLTrackedComponentHome"/>
			<Binding Name="TrackedComponentLink" Class="com.tridion.tracking.componentlinks.SQLTrackedComponentLinkHome"/>
		-->
		<Bindings>
			<Binding Name="LinkInfo" Class="com.tridion.broker.linking.FSCSVLinkInfoHome"/>
			<Binding Name="ComponentMeta" Class="com.tridion.broker.components.meta.XMLFileComponentMetaHome"/>
			<Binding Name="PageMeta" Class="com.tridion.broker.pages.meta.XMLFilePageMetaHome"/>
			<Binding Name="BinaryMeta" Class="com.tridion.broker.binaries.meta.XMLFileBinaryMetaHome"/>
			<Binding Name="Schema" Class="com.tridion.broker.schemas.FSSchemaHome"/>
			<Binding Name="Template" Class="com.tridion.broker.xslt.FSXSLTHome"/>
			<Binding Name="XSLT" Class="com.tridion.broker.xslt.FSXSLTHome"/>
			<Binding Name="ComponentPresentationMeta" Class="com.tridion.broker.componentpresentations.meta.XMLFileComponentPresentationMetaHome"/>
			<Binding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.FSTextComponentPresentationHome"/>
			<!-- 
				If you want to use ASP.NET Dynamic Component Presentations, use com.tridion.broker.componentpresentations.FSASCXComponentPresentationHome 
				for the ASPComponentPresentation home. If the DCP has ASCX as output format the DCP will be treated as a User Control and is dynamically 
				executed on the page. Example:
				
				<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.FSASCXComponentPresentationHome" />
				
				These User Controls can only be executed if they are stored inside the website. See /Configuration/Publications/Publication/Dcp/Asp in this file
				to configure this location:
			-->
			<Binding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.FSASPComponentPresentationHome"/>
			<Binding Name="JSPComponentPresentation" Class="com.tridion.broker.componentpresentations.FSJSPComponentPresentationHome"/>
			<Binding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.FSXMLComponentPresentationHome"/>
			<Binding Name="Reference" Class="com.tridion.broker.references.FileReferenceHome"/>
		</Bindings>
		<!--
			Object caching is an optional setting that allows you to store the most commonly
			used, or resource intensive objects in a cache. The cache keeps these objects
			available for the applications that request them, rather than reinitializing them
			each time they are requested.
		-->
		<!--  Determines whether caching will occur. -->
		<ObjectCache Enabled="true">
			<!--
				Determines what policy the cache will use to determine what objects stay in the cache
				and what objects are removed from the cache when it is full.
			-->
			<Policy Type="LRU" Class="com.tridion.cache.LRUPolicy">
				<!--
					The maximum size of memory used by the cache. The string must consist a number 
					followed by units: "k" or "kb" for kilobytes; "m" or "mb" for megabytes (case insensitive)
				-->
				<Param Name="MemSize" Value="128mb"/>
			</Policy>
			<!-- The Features element specifies classes that add additional functionality to the cache. -->
			<Features>
				<Feature Type="DependencyTracker" Class="com.tridion.cache.DependencyTracker"/>
			</Features>
			<!--
				The optional CacheBindings element specifies whether objects that are managed
				from a specific home object are cached. CacheBindings may contain zero or more
				CacheBinding elements.

				CacheBinding elements must contain the following attributes:
				- Name : The binding name of the home object add caching to. This must match the
							Name attribute used in the Bindings section of the configuration file.
				- Class: The fully qualified class name of the cached home object.
			-->
			<CacheBindings>
				<!--
						These are the basic bindings for the classes most commonly instantiated by the Broker.
						These classes should usually be used.
					-->
				<CacheBinding Name="BinaryMeta" Class="com.tridion.broker.binaries.meta.CachedBinaryMetaHome"/>
				<CacheBinding Name="ComponentMeta" Class="com.tridion.broker.components.meta.CachedComponentMetaHome"/>
				<CacheBinding Name="ComponentPresentationMeta" Class="com.tridion.broker.componentpresentations.meta.CachedComponentPresentationMetaHome"/>
				<CacheBinding Name="LinkInfo" Class="com.tridion.broker.linking.CachedLinkInfoHome"/>
				<CacheBinding Name="PageMeta" Class="com.tridion.broker.pages.meta.CachedPageMetaHome"/>
				<CacheBinding Name="Template" Class="com.tridion.broker.xslt.CachedXSLTHome"/>
				<CacheBinding Name="XSLT" Class="com.tridion.broker.xslt.CachedXSLTHome"/>
				<!--
				<CacheBinding Name="Taxonomy" Class="com.tridion.broker.taxonomies.CachedTaxonomyHome"/>
				-->
				<!--
						These classes are used for Dynamic Component Presentations.
					-->
				<CacheBinding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.CachedComponentPresentationHome"/>
				<CacheBinding Name="JSPComponentPresentation" Class="com.tridion.broker.componentpresentations.CachedComponentPresentationHome"/>
				<CacheBinding Name="TextComponentPresentation" Class="com.tridion.broker.componentpresentations.CachedComponentPresentationHome"/>
				<CacheBinding Name="XMLComponentPresentation" Class="com.tridion.broker.componentpresentations.CachedComponentPresentationHome"/>
				<!--
				<CacheBinding Name="ASPComponentPresentation" Class="com.tridion.broker.componentpresentations.CachedComponentPresentationHome"/>
				-->
				<!--
						Add these classes if you are using Tracking and Profiling from the WAI
					-->
				<!--
					<CacheBinding Name="CustomerCharacteristic" Class="com.tridion.personalization.CachedCustomerCharacteristicHome"/>
					<CacheBinding Name="Timeframe" Class="com.tridion.timeframes.CachedTimeframeHome"/>
					<CacheBinding Name="TrackedComponent" Class="com.tridion.tracking.components.CachedTrackedComponentHome"/>
					<CacheBinding Name="TrackedComponentLink" Class="com.tridion.tracking.componentlinks.CachedTrackedComponentLinkHome"/>
					<CacheBinding Name="TrackedPage" Class="com.tridion.tracking.pages.CachedTrackedPageHome"/>
					<CacheBinding Name="TrackingKey" Class="com.tridion.personalization.CachedTrackingKeyHome"/>
					<CacheBinding Name="User" Class="com.tridion.user.CachedUserHome"/>
				-->
			</CacheBindings>
			<!--
					The optional RemoteSycnhronization element specifies a remote Cache Channel Service.
					The remote Cache Channel Service is used to send messages between caches that are running
					on separate virtual machines. (For example, if the Broker and the Deployer run on separate
					virtual machines.)
					The Cache Channel Service must be running and listening on the configured host and port for
					remote synchronization to function.
					If this element is omitted, the cache does not use any inter-virtual machine cache communication.
					You must use the RemoteSynchronization element in conjunction with the Cache Channel service in
					order for objects to be updated or removed from the Broker's object cache when they are published
					or unpublished using the Deployer.
 				-->
			<RemoteSynchronization Host="127.0.0.1" Port="1097" Queuesize="4096" ServiceMonitorInterval="10000"/>
		</ObjectCache>
		<!-- The optional MetaQueryConstants section allows setting of some advanced properties.
			     FindByURLCaseSensitivity overrides the default behaviour of the findByURL methods
			     for retrieving BinaryMeta and PageMeta data.
			     See Section 6.4 of the Content Delivery Guide for details.
			<MetaQueryConstants>
				<FindByURLCaseSensitivity Value="false"/>
			</MetaQueryConstants>
			-->
	</Global>
	<!-- The Publications element specifies the default setting for all
	     Publications. This information can be overridden in Publication elements.

	     The DefaultRootLocation specifies a directory for both pages and
	     binaries (if DefaultRootDataLocation argument is not specified). 
	     By default, this folder is also used to find the meta-data.
	     Note that any directory information defined in this Publications
	     or lower Publication elements override configuration information
	     defined by the Linking configuration.
	     
	     The DefaultRootDataLocation is optional setting. It is for specifying 
	     base-directory in which pages and binaries are located. If this argument 
	     is omited then DefaultRootLocation will be used.

	     -->

	<Publications DefaultRootLocation="/apps/tridion/wwwroot" DefaultRootDataLocation="/apps/tridion/wwwroot/data">
		<!-- The publication element allows you to specify Publication specific
		     settings. This element is optional.
		     The Id attribute indicates the id of the publication. This should be a number.

		     A publication can optionally contain a Dcp element.
		     The following optional attributes override storage settings:
		        DataRoot     The directory in which meta-data should be stored and
		                     retrieved on the filesystem. If this is set it
		                     will override any value set in the Publications
		                     element's DefaultRootLocation.
		        DocumentRoot The base-directory in which pages and binaries are located. -->
		<Publication Id="0" DocumentRoot="/apps/tridion/wwwroot/pub1" DataRoot="/apps/tridion/wwwroot/data/pub1">
			<!-- The Dcp element contains one or more file type specific locations to store
			     files of that type. -->
			<Dcp>
				<!-- The Jsp element allows you to specify settings for JSP pages.
				     The required Location attribute overrides storage settings:
				        Location	The directory in which JSP pages should be stored
						            and retrieved on the filesystem. This overrides
						            any values set in the Publications element's
						            DefaultRootLocation and the Publication element's DataRoot. -->
				<Jsp Location="c:/AbsoluteLocation(1)"/>
				<!-- The Asp element allows you to specify settings for ASP pages.
				     The required Location attribute overrides storage settings:
				        Location	The directory in which ASP and/or ASCX DCPs should be stored
						            and retrieved on the filesystem. This overrides
						            any values set in the Publications element's
						            DefaultRootLocation and the Publication element's DataRoot. 
						            For ASCX DCPs it is important that this location is part of the website in which
						            the DCPs are executed.
				-->
				<Asp Location="c:/AbsoluteLocation(1)"/>
				<!-- The Xml element allows you to specify settings for XML files.
					 The required Location attribute overrides storage settings:
				        Location	The directory in which XML files should be stored
						            and retrieved on the filesystem. This overrides
						            any values set in the Publications element's
						            DefaultRootLocation and the Publication element's DataRoot. -->
				<Xml Location="c:/AbsoluteLocation(1)"/>
				<!-- The Txt element allows you to specify settings for text files.
				     The required Location attribute overrides storage settings:
				        Location	The directory in which test files should be stored
						            and retrieved on the filesystem. This overrides
						            any values set in the Publications element's
						            DefaultRootLocation and the Publication element's DataRoot. -->
				<Txt Location="c:/AbsoluteLocation(1)"/>
			</Dcp>
		</Publication>
	</Publications>
	
	<!--
	Specifies the location of the license file.
	-->
	<!--	-->
	<License Location="/apps/tridion/Content_Delivery/config/cd_licenses.xml"/>

</Configuration>
